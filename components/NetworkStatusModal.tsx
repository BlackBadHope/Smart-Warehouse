import React, { useState, useEffect } from 'react';
import { Server, Wifi, WifiOff, Users, Globe, AlertCircle, CheckCircle, RefreshCw } from 'lucide-react';
import { ASCII_COLORS } from '../constants';
import masterClientService from '../services/masterClientService';
import syncService from '../services/syncService';
import SyncConflictModal from './SyncConflictModal';

interface Props {
  show: boolean;
  onClose: () => void;
}

interface NetworkStatus {
  mode: 'master' | 'client';
  connected: boolean;
  masterIP: string | null;
  devicesCount: number;
  lastSync?: number;
}

const NetworkStatusModal: React.FC<Props> = ({ show, onClose }) => {
  const [status, setStatus] = useState<NetworkStatus | null>(null);
  const [isInitializing, setIsInitializing] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [isSyncing, setIsSyncing] = useState(false);
  const [syncConflicts, setSyncConflicts] = useState<any[]>([]);
  const [showConflictModal, setShowConflictModal] = useState(false);

  useEffect(() => {
    if (show) {
      loadStatus();
    }
  }, [show]);

  const loadStatus = async () => {
    try {
      const networkStatus = await masterClientService.getNetworkStatus();
      setStatus(networkStatus);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏');
    }
  };

  const handleInitialize = async () => {
    if (!status) return;
    
    setIsInitializing(true);
    setError('');
    setSuccess('');
    
    try {
      let result = false;
      
      if (status.mode === 'master') {
        result = await masterClientService.initializeMaster();
        setSuccess('–ú–∞—Å—Ç–µ—Ä-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –î—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è.');
      } else {
        result = await masterClientService.initializeClient();
        if (result) {
          setSuccess('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –º–∞—Å—Ç–µ—Ä-—Å–µ—Ä–≤–µ—Ä—É!');
        } else {
          setError('–ú–∞—Å—Ç–µ—Ä-—Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏');
        }
      }
      
      if (result) {
        await loadStatus();
      }
    } catch (error) {
      setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${(error as Error).message}`);
    } finally {
      setIsInitializing(false);
    }
  };

  const handleDisconnect = () => {
    masterClientService.disconnect();
    setSuccess('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ç–∏');
    loadStatus();
  };

  const handleFullSync = async () => {
    if (status?.mode !== 'client' || !status.masterIP) return;
    
    setIsSyncing(true);
    setError('');
    setSuccess('');
    
    try {
      const syncResult = await syncService.triggerManualSync(status.masterIP);
      
      if (syncResult.conflicts.length > 0) {
        setSyncConflicts(syncResult.conflicts);
        setShowConflictModal(true);
      } else if (syncResult.success) {
        setSuccess(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ ${syncResult.syncedItemsCount} –æ–±—ä–µ–∫—Ç–æ–≤`);
        await loadStatus();
      } else {
        setError(syncResult.errorMessage || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + (error as Error).message);
    } finally {
      setIsSyncing(false);
    }
  };

  const handleConflictResolve = async (resolutions: Record<string, 'local' | 'server' | 'merge'>) => {
    if (!status?.masterIP) return;
    
    try {
      const success = await syncService.resolveConflicts(status.masterIP, syncConflicts, resolutions);
      
      if (success) {
        setSuccess('–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        setShowConflictModal(false);
        setSyncConflicts([]);
        await loadStatus();
        
        // Trigger data refresh
        window.dispatchEvent(new CustomEvent('syncDataUpdated'));
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
    }
  };

  const handleConflictCancel = () => {
    setShowConflictModal(false);
    setSyncConflicts([]);
    setError('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
  };

  if (!show || !status) return null;

  return (
    <div className={`fixed inset-0 ${ASCII_COLORS.bg} bg-opacity-90 flex items-center justify-center z-50 p-4`}>
      <div className={`${ASCII_COLORS.modalBg} p-6 rounded-lg shadow-xl w-full max-w-2xl border-2 ${ASCII_COLORS.border}`}>
        <div className="flex items-center justify-between mb-6">
          <h2 className={`${ASCII_COLORS.accent} text-xl font-bold flex items-center`}>
            {status.mode === 'master' ? (
              <Server className="w-6 h-6 mr-2 text-green-400" />
            ) : (
              <Wifi className="w-6 h-6 mr-2 text-blue-400" />
            )}
            –°–ï–¢–ï–í–û–ô –°–¢–ê–¢–£–°
          </h2>
          <button 
            onClick={onClose}
            className={`${ASCII_COLORS.buttonBg} p-2 rounded ${ASCII_COLORS.buttonHoverBg} border ${ASCII_COLORS.border}`}
          >
            ‚úï
          </button>
        </div>

        {error && (
          <div className="bg-red-900 bg-opacity-20 border border-red-500 p-3 rounded mb-4">
            <div className="flex items-center text-red-400">
              <AlertCircle className="w-4 h-4 mr-2" />
              {error}
            </div>
          </div>
        )}

        {success && (
          <div className="bg-green-900 bg-opacity-20 border border-green-500 p-3 rounded mb-4">
            <div className="flex items-center text-green-400">
              <CheckCircle className="w-4 h-4 mr-2" />
              {success}
            </div>
          </div>
        )}

        <div className="space-y-4">
          {/* Mode Info */}
          <div className={`${ASCII_COLORS.inputBg} p-4 rounded border ${ASCII_COLORS.border}`}>
            <h3 className="font-semibold mb-2 flex items-center">
              {status.mode === 'master' ? (
                <>
                  <Server className="w-5 h-5 mr-2 text-green-400" />
                  –ú–ê–°–¢–ï–† –†–ï–ñ–ò–ú
                </>
              ) : (
                <>
                  <Wifi className="w-5 h-5 mr-2 text-blue-400" />
                  –ö–õ–ò–ï–ù–¢ –†–ï–ñ–ò–ú
                </>
              )}
            </h3>
            <p className="text-sm opacity-80">
              {status.mode === 'master' 
                ? '–≠—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏' 
                : '–≠—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –º–∞—Å—Ç–µ—Ä-—Å–µ—Ä–≤–µ—Ä—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
              }
            </p>
          </div>

          {/* Connection Status */}
          <div className={`${ASCII_COLORS.inputBg} p-4 rounded border ${ASCII_COLORS.border}`}>
            <h3 className="font-semibold mb-2 flex items-center">
              {status.connected ? (
                <>
                  <CheckCircle className="w-5 h-5 mr-2 text-green-400" />
                  –ü–û–î–ö–õ–Æ–ß–ï–ù
                </>
              ) : (
                <>
                  <WifiOff className="w-5 h-5 mr-2 text-red-400" />
                  –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù
                </>
              )}
            </h3>
            
            <div className="space-y-2 text-sm">
              {status.masterIP && (
                <div className="flex items-center">
                  <Globe className="w-4 h-4 mr-2" />
                  <span>–ú–∞—Å—Ç–µ—Ä IP: {status.masterIP}</span>
                </div>
              )}
              
              <div className="flex items-center">
                <Users className="w-4 h-4 mr-2" />
                <span>
                  {status.mode === 'master' 
                    ? `–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${status.devicesCount}` 
                    : `–£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏: ${status.devicesCount + 1}`
                  }
                </span>
              </div>
              
              {status.lastSync && (
                <div className="flex items-center">
                  <RefreshCw className="w-4 h-4 mr-2" />
                  <span>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {new Date(status.lastSync).toLocaleTimeString('ru-RU')}</span>
                </div>
              )}
            </div>
          </div>

          {/* Actions */}
          <div className="flex flex-wrap gap-2">
            {!status.connected ? (
              <button 
                onClick={handleInitialize}
                disabled={isInitializing}
                className={`${ASCII_COLORS.buttonBg} ${ASCII_COLORS.accent} px-4 py-2 rounded ${ASCII_COLORS.buttonHoverBg} border border-green-500 disabled:opacity-50 flex items-center`}
              >
                {isInitializing ? (
                  <>
                    <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                    {status.mode === 'master' ? '–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...' : '–ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...'}
                  </>
                ) : (
                  <>
                    {status.mode === 'master' ? (
                      <>üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –°–ï–†–í–ï–†</>
                    ) : (
                      <>üì° –ù–ê–ô–¢–ò –ú–ê–°–¢–ï–†</>
                    )}
                  </>
                )}
              </button>
            ) : (
              <button 
                onClick={handleDisconnect}
                className={`${ASCII_COLORS.buttonBg} px-4 py-2 rounded ${ASCII_COLORS.buttonHoverBg} border ${ASCII_COLORS.border} text-red-400 border-red-500`}
              >
                üîå –û–¢–ö–õ–Æ–ß–ò–¢–¨–°–Ø
              </button>
            )}

            {status.connected && status.mode === 'client' && (
              <button 
                onClick={handleFullSync}
                disabled={isSyncing}
                className={`${ASCII_COLORS.buttonBg} px-4 py-2 rounded ${ASCII_COLORS.buttonHoverBg} border ${ASCII_COLORS.border} flex items-center disabled:opacity-50`}
              >
                <RefreshCw className={`w-4 h-4 mr-2 ${isSyncing ? 'animate-spin' : ''}`} />
                {isSyncing ? '–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø...' : '–ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø'}
              </button>
            )}

            <button 
              onClick={loadStatus}
              className={`${ASCII_COLORS.buttonBg} px-4 py-2 rounded ${ASCII_COLORS.buttonHoverBg} border ${ASCII_COLORS.border} flex items-center`}
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              –û–ë–ù–û–í–ò–¢–¨
            </button>
          </div>

          {/* Help Text */}
          <div className="bg-yellow-900 bg-opacity-20 p-3 rounded text-sm">
            <p className="text-yellow-300">
              <strong>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong>
            </p>
            <ul className="mt-2 space-y-1 text-xs opacity-80">
              {status.mode === 'master' ? (
                <>
                  <li>‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏</li>
                  <li>‚Ä¢ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥—É—Ç —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä</li>
                  <li>‚Ä¢ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏</li>
                  <li>‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</li>
                </>
              ) : (
                <>
                  <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∞—Å—Ç–µ—Ä-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Å–µ—Ç–∏</li>
                  <li>‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ–¥–Ω–æ–π Wi-Fi —Å–µ—Ç–∏</li>
                  <li>‚Ä¢ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è</li>
                  <li>‚Ä¢ –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ñ–ª–∞–π–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ–∑–∂–µ</li>
                </>
              )}
            </ul>
          </div>
        </div>
      </div>
      
      <SyncConflictModal 
        show={showConflictModal}
        conflicts={syncConflicts}
        onResolve={handleConflictResolve}
        onCancel={handleConflictCancel}
      />
    </div>
  );
};

export default NetworkStatusModal;