import React, { useState, useRef, useEffect } from 'react';
import { QrCode, Copy, Check, Camera } from 'lucide-react';
import { ASCII_COLORS } from '../constants';
import simpleQRP2PService from '../services/simpleQRP2PService';
import debugService from '../services/debugService';
import localizationService from '../services/localizationService';

interface QRConnectionModalProps {
  show: boolean;
  onClose: () => void;
}

// Generate QR code URL using external service
function generateQRCodeUrl(data: string): string {
  const encoded = encodeURIComponent(data);
  // Use a public QR API service
  return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encoded}`;
}

const QRConnectionModal: React.FC<QRConnectionModalProps> = ({ show, onClose }) => {
  const [mode, setMode] = useState<'menu' | 'generate' | 'scan' | 'camera' | 'complete'>('menu');
  const [qrData, setQrData] = useState<string>('');
  const [connectionData, setConnectionData] = useState<any>(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [copied, setCopied] = useState(false);
  const [qrImageError, setQrImageError] = useState(false);
  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const videoRef = useRef<HTMLVideoElement>(null);

  // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∏–º–∞
  React.useEffect(() => {
    if (cameraStream && videoRef.current) {
      videoRef.current.srcObject = cameraStream;
      videoRef.current.play().catch(e => {
        console.error('Video autoplay failed:', e);
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É play –µ—Å–ª–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
      });
    }
  }, [cameraStream]);

  if (!show) return null;

  const handleCreateConnection = async () => {
    try {
      setIsConnecting(true);
      debugService.info('Creating SIMPLE QR connection offer...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –ë–ï–ó STUN —Å–µ—Ä–≤–µ—Ä–æ–≤
      const connectionString = await simpleQRP2PService.createQRConnectionOffer();
      
      alert(`QR —Å–æ–∑–¥–∞–Ω! –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: ${connectionString.length}`);
      
      console.log('Setting QR data:', { connectionString: connectionString.substring(0, 100) + '...' });
      
      setQrData(connectionString);
      setQrImageError(false); // Reset QR error state
      setMode('generate');
      
      console.log('Mode changed to generate, qrData length:', connectionString.length);
      
      debugService.info('SIMPLE QR connection offer created!');
    } catch (error) {
      debugService.error('Failed to create QR connection offer', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞: ' + (error as Error).message);
    } finally {
      setIsConnecting(false);
    }
  };

  const handleScanConnection = () => {
    setMode('scan');
  };

  const handleCameraConnection = async () => {
    try {
      setIsConnecting(true);
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment', // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          width: { ideal: 640 },
          height: { ideal: 480 }
        }
      });
      setCameraStream(stream);
      setMode('camera');
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ
        videoRef.current.play().catch(e => console.error('Video play failed:', e));
      }
    } catch (error) {
      alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ: ' + (error as Error).message);
    } finally {
      setIsConnecting(false);
    }
  };

  const stopCamera = () => {
    if (cameraStream) {
      cameraStream.getTracks().forEach(track => track.stop());
      setCameraStream(null);
    }
  };

  const handleAcceptConnection = async () => {
    const textarea = textareaRef.current;
    if (!textarea?.value.trim()) {
      alert('‚ö†Ô∏è –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ QR –∫–æ–¥–∞');
      return;
    }

    try {
      setIsConnecting(true);
      const offerData = JSON.parse(textarea.value.trim());
      
      debugService.info('Accepting QR connection...', { deviceId: offerData.deviceId });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å
      const answerJson = await simpleQRP2PService.acceptQRConnectionOffer(textarea.value.trim());
      try {
        await navigator.clipboard.writeText(answerJson);
        alert('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!\\n\\nüìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
      } catch (e) {
        alert(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\\n\\nüìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ:\\n${answerJson}\\n\\nüì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –Ω–∞ –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.`);
      }
      
      debugService.info('SIMPLE QR connection accepted successfully!');
    } catch (error) {
      debugService.error('Failed to accept QR connection', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + (error as Error).message);
    } finally {
      setIsConnecting(false);
    }
  };

  const copyToClipboard = async () => {
    if (!qrData) return;
    
    try {
      await navigator.clipboard.writeText(qrData);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = qrData;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const handleCompleteConnection = async () => {
    const textarea = textareaRef.current;
    if (!textarea?.value.trim()) {
      alert('‚ö†Ô∏è –í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
      return;
    }

    try {
      setIsConnecting(true);
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await simpleQRP2PService.completeQRConnection(textarea.value.trim());
      
      alert('üéâ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      setMode('complete');
      
      debugService.info('SIMPLE QR connection completed successfully!');
    } catch (error) {
      debugService.error('Failed to complete QR connection', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + (error as Error).message);
    } finally {
      setIsConnecting(false);
    }
  };

  const resetModal = () => {
    stopCamera(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
    setMode('menu');
    setQrData('');
    setConnectionData(null);
    setIsConnecting(false);
    setCopied(false);
    setQrImageError(false);
  };

  return (
    <div className="modal-backdrop fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50 p-4">
      <div className={`modal-content ${ASCII_COLORS.modalBg} rounded-lg shadow-2xl w-full max-w-lg border-2 ${ASCII_COLORS.border}`}>
        {/* Header */}
        <div className={`flex items-center justify-between p-4 border-b-2 ${ASCII_COLORS.border}`}>
          <div className="flex items-center">
            {mode !== 'menu' && (
              <button 
                onClick={resetModal}
                className={`mr-3 ${ASCII_COLORS.buttonBg} p-1 rounded border ${ASCII_COLORS.border} hover:${ASCII_COLORS.buttonHoverBg}`}
              >
                ‚Üê
              </button>
            )}
            <h2 className={`${ASCII_COLORS.accent} text-xl font-bold flex items-center`}>
              <QrCode className="w-5 h-5 mr-2" />
              {mode === 'menu' && localizationService.translate('p2p.title')}
              {mode === 'generate' && localizationService.translate('p2p.create_qr')}
              {mode === 'scan' && localizationService.translate('p2p.connect')}
              {mode === 'camera' && '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR –∫–∞–º–µ—Ä–æ–π'}
              {mode === 'complete' && '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'}
            </h2>
          </div>
          <button 
            onClick={() => { resetModal(); onClose(); }} 
            className={`${ASCII_COLORS.buttonBg} p-2 rounded-md ${ASCII_COLORS.buttonHoverBg} border ${ASCII_COLORS.border}`}
          >
            [CLOSE]
          </button>
        </div>

        <div className="p-4 space-y-4">
          {/* Menu Mode */}
          {mode === 'menu' && (
            <>
              <div className="text-center">
                <p className="text-gray-300 mb-4">
                  {localizationService.translate('p2p.connection_desc')}
                </p>
              </div>

              <div className="grid grid-cols-3 gap-2">
                <button
                  onClick={handleCreateConnection}
                  disabled={isConnecting}
                  className={`p-3 ${ASCII_COLORS.buttonBg} rounded-lg border ${ASCII_COLORS.border} hover:${ASCII_COLORS.buttonHoverBg} flex flex-col items-center space-y-1 disabled:opacity-50`}
                >
                  <QrCode className="w-6 h-6 text-green-400" />
                  <span className="text-xs">{isConnecting ? 'Creating...' : 'Create QR'}</span>
                </button>

                <button
                  onClick={handleCameraConnection}
                  disabled={isConnecting}
                  className={`p-3 ${ASCII_COLORS.buttonBg} rounded-lg border ${ASCII_COLORS.border} hover:${ASCII_COLORS.buttonHoverBg} flex flex-col items-center space-y-1 disabled:opacity-50`}
                >
                  <Camera className="w-6 h-6 text-blue-400" />
                  <span className="text-xs">{isConnecting ? 'Starting...' : 'Scan QR'}</span>
                </button>

                <button
                  onClick={handleScanConnection}
                  className={`p-3 ${ASCII_COLORS.buttonBg} rounded-lg border ${ASCII_COLORS.border} hover:${ASCII_COLORS.buttonHoverBg} flex flex-col items-center space-y-1`}
                >
                  <div className="w-6 h-6 text-yellow-400 flex items-center justify-center text-sm font-bold">üìã</div>
                  <span className="text-xs">Manual</span>
                </button>
              </div>

              <div className={`p-3 rounded border ${ASCII_COLORS.border} bg-green-900/20`}>
                <p className="text-green-400 text-xs">
                  ‚úÖ <strong>{localizationService.translate('ui.ready')}:</strong> {localizationService.translate('p2p.create_qr')}.<br/>
                  üì± <strong>{localizationService.translate('ui.compatible')}:</strong> {localizationService.translate('p2p.compatible') || '–õ—é–±—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º'}.
                </p>
              </div>
            </>
          )}

          {/* Generate Mode */}
          {mode === 'generate' && (
            <>
              <div className="text-center mb-4">
                <p className="text-gray-300">
                  {localizationService.translate('p2p.connection_desc')}
                </p>
              </div>

              <div className={`p-4 bg-gray-900 rounded border ${ASCII_COLORS.border} text-center`}>
                <div className="mb-3">
                  {/* Real QR Code */}
                  {!qrImageError ? (
                    <img 
                      src={generateQRCodeUrl(qrData)} 
                      alt="QR Code for P2P Connection"
                      className="mx-auto mb-2 border border-white rounded"
                      style={{ maxWidth: '200px', height: 'auto' }}
                      onError={() => setQrImageError(true)}
                    />
                  ) : (
                    <div className="mx-auto mb-2 border border-red-500 rounded p-4 bg-red-900/20 max-w-[200px]">
                      <p className="text-red-400 text-xs">
                        ‚ö†Ô∏è QR –∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω<br/>
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ
                      </p>
                    </div>
                  )}
                  
                  {/* Fallback: JSON data for manual sharing */}
                  <details className="mt-2" open={qrImageError}>
                    <summary className="text-xs text-gray-400 cursor-pointer">üìã Manual Data {qrImageError ? '(QR failed)' : '(if QR fails)'}</summary>
                    <pre className="text-xs text-green-400 font-mono leading-tight mt-2 p-2 bg-black rounded border max-h-20 overflow-y-auto text-left">
                      {qrData}
                    </pre>
                  </details>
                </div>
                
                <div className="flex gap-2">
                  <button
                    onClick={copyToClipboard}
                    className={`flex-1 p-2 ${ASCII_COLORS.buttonBg} rounded border ${ASCII_COLORS.border} hover:${ASCII_COLORS.buttonHoverBg} flex items-center justify-center`}
                  >
                    {copied ? (
                      <><Check className="w-4 h-4 mr-2" /> {localizationService.translate('p2p.copied')}</>
                    ) : (
                      <><Copy className="w-4 h-4 mr-2" /> {localizationService.translate('p2p.copy_data')}</>
                    )}
                  </button>
                </div>
                
                <button
                  onClick={() => setMode('complete')}
                  className={`w-full mt-3 p-3 bg-green-800 rounded border ${ASCII_COLORS.border} hover:bg-green-700 flex items-center justify-center text-green-100`}
                >
                  üîó –û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...
                </button>
              </div>

              <div className={`p-3 rounded border ${ASCII_COLORS.border} bg-blue-900/20`}>
                <p className="text-blue-400 text-xs">
                  üì± <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong><br/>
                  1. <strong>–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥</strong> –¥—Ä—É–≥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–∫–∞–º–µ—Ä–∞/QR —Å–∫–∞–Ω–µ—Ä)<br/>
                  2. <strong>–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ</strong> –∫–Ω–æ–ø–∫–æ–π –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ<br/>
                  3. –ù–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"<br/>
                  4. –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
                </p>
              </div>
            </>
          )}

          {/* Scan Mode */}
          {mode === 'scan' && (
            <>
              <div className="text-center mb-4">
                <p className="text-gray-300">
                  {localizationService.translate('p2p.paste_prompt')}
                </p>
              </div>

              <div className="space-y-3">
                <textarea
                  ref={textareaRef}
                  placeholder={localizationService.translate('p2p.paste_prompt')}
                  className={`w-full h-32 p-3 bg-gray-900 border ${ASCII_COLORS.border} rounded text-gray-300 text-sm font-mono resize-none`}
                />
                
                <button
                  onClick={handleAcceptConnection}
                  disabled={isConnecting}
                  className={`w-full p-3 ${ASCII_COLORS.buttonBg} rounded border ${ASCII_COLORS.border} hover:${ASCII_COLORS.buttonHoverBg} disabled:opacity-50 flex items-center justify-center`}
                >
                  {isConnecting ? (
                    <>{localizationService.translate('p2p.connecting')}</>
                  ) : (
                    <>üîó {localizationService.translate('p2p.connect_device')}</>
                  )}
                </button>
              </div>

              <div className={`p-3 rounded border ${ASCII_COLORS.border} bg-blue-900/20`}>
                <p className="text-blue-400 text-xs">
                  üìã <strong>–§–æ—Ä–º–∞—Ç:</strong> JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞<br/>
                  üîÑ <strong>–û—Ç–≤–µ—Ç:</strong> –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
                </p>
              </div>
            </>
          )}

          {/* Camera Mode - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–∞–º–µ—Ä–æ–π */}
          {mode === 'camera' && (
            <>
              <div className="text-center mb-4">
                <p className="text-gray-300">
                  –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                </p>
              </div>

              <div className="space-y-3">
                <div className="relative bg-black rounded-lg overflow-hidden border-2 border-dashed border-blue-500">
                  <video
                    ref={videoRef}
                    autoPlay
                    playsInline
                    muted
                    controls={false}
                    className="w-full h-64 object-cover"
                  />
                  <div className="absolute inset-0 border-4 border-blue-500 border-dashed opacity-50 pointer-events-none"></div>
                  <div className="absolute top-2 right-2 bg-red-600 text-white text-xs px-2 py-1 rounded">
                    üî¥ LIVE
                  </div>
                </div>
                
                <div className="flex gap-2">
                  <button
                    onClick={() => {
                      stopCamera();
                      setMode('scan');
                    }}
                    className={`flex-1 p-3 ${ASCII_COLORS.buttonBg} rounded border ${ASCII_COLORS.border} hover:${ASCII_COLORS.buttonHoverBg} flex items-center justify-center`}
                  >
                    üìã Switch to Manual Input
                  </button>
                </div>
              </div>

              <div className={`p-3 rounded border ${ASCII_COLORS.border} bg-orange-900/20`}>
                <p className="text-orange-400 text-xs">
                  ‚ö†Ô∏è <strong>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</strong><br/>
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.<br/>
                  –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Manual —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏ QR –¥–∞–Ω–Ω—ã—Ö.
                </p>
              </div>
            </>
          )}

          {/* Complete Mode - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
          {mode === 'complete' && (
            <>
              <div className="text-center mb-4">
                <p className="text-gray-300">
                  –í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:
                </p>
              </div>

              <div className="space-y-3">
                <textarea
                  ref={textareaRef}
                  placeholder="–í—Å—Ç–∞–≤—å—Ç–µ JSON –æ—Ç–≤–µ—Ç –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞..."
                  className={`w-full h-32 p-3 bg-gray-900 border ${ASCII_COLORS.border} rounded text-gray-300 text-sm font-mono resize-none`}
                />
                
                <button
                  onClick={handleCompleteConnection}
                  disabled={isConnecting}
                  className={`w-full p-3 bg-purple-800 rounded border ${ASCII_COLORS.border} hover:bg-purple-700 disabled:opacity-50 flex items-center justify-center text-purple-100`}
                >
                  {isConnecting ? (
                    <>‚è≥ –ó–∞–≤–µ—Ä—à–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...</>
                  ) : (
                    <>üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</>
                  )}
                </button>
              </div>

              <div className={`p-3 rounded border ${ASCII_COLORS.border} bg-purple-900/20`}>
                <p className="text-purple-400 text-xs">
                  üìã <strong>–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥:</strong><br/>
                  1. –í—Å—Ç–∞–≤—å—Ç–µ JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞<br/>
                  2. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"<br/>
                  3. –ü–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è!
                </p>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default QRConnectionModal;