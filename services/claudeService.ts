import Anthropic from '@anthropic-ai/sdk';
import * as localStorageService from './localStorageService';
import { ItemCore } from '../types';
import { v4 as uuidv4 } from 'uuid';

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á –≤ UI
let anthropic: Anthropic | null = null;

export const initializeClaudeAPI = (apiKey: string) => {
  anthropic = new Anthropic({
    apiKey: apiKey,
    dangerouslyAllowBrowser: true // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
  });
};

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
}

interface InventoryContext {
  currentLocation: string;
  totalWarehouses: number;
  totalItems: number;
  recentItems: Array<{name: string, location: string, quantity: number}>;
  structureInfo: string;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ SMARTIE
const availableActions = {
  createWarehouse: (name: string) => {
    const warehouse = localStorageService.addWarehouse(name);
    return `‚úÖ –°–∫–ª–∞–¥ "${name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.`;
  },

  createRoom: (warehouseName: string, roomName: string) => {
    try {
      const warehouse = localStorageService.findEntityByNameAndType(warehouseName, 'warehouse');
      if (!warehouse) return `‚ùå –°–∫–ª–∞–¥ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const room = localStorageService.addRoom(warehouse.id, roomName);
      return `‚úÖ –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∫–ª–∞–¥–µ "${warehouseName}".`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  createContainer: (warehouseName: string, roomName: string, containerName: string) => {
    try {
      const warehouse = localStorageService.findEntityByNameAndType(warehouseName, 'warehouse');
      if (!warehouse) return `‚ùå –°–∫–ª–∞–¥ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const room = localStorageService.findEntityByNameAndType(roomName, 'room', warehouseName);
      if (!room) return `‚ùå –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∫–ª–∞–¥–µ "${warehouseName}".`;
      
      const container = localStorageService.addShelf(warehouse.id, room.id, containerName);
      return `‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerName}" —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ "${roomName}" —Å–∫–ª–∞–¥–∞ "${warehouseName}".`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  addItem: (warehouseName: string, roomName: string, containerName: string, itemData: ItemCore) => {
    try {
      const warehouse = localStorageService.findEntityByNameAndType(warehouseName, 'warehouse');
      if (!warehouse) return `‚ùå –°–∫–ª–∞–¥ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const room = localStorageService.findEntityByNameAndType(roomName, 'room', warehouseName);
      if (!room) return `‚ùå –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
      
      const container = localStorageService.findEntityByNameAndType(containerName, 'shelf', warehouseName, roomName);
      if (!container) return `‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const item = localStorageService.addItem(warehouse.id, room.id, container.id, itemData);
      return `‚úÖ –¢–æ–≤–∞—Ä "${itemData.name}" (${itemData.quantity} ${itemData.unit || '—à—Ç'}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ "${containerName}".`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  searchItems: (itemName: string) => {
    const results = localStorageService.findItemsByName(itemName);
    if (results.length === 0) {
      return `‚ùå –¢–æ–≤–∞—Ä "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
    }
    
    let response = `üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ "${itemName}": ${results.length}\n\n`;
    results.forEach(item => {
      response += `üì¶ ${item.quantity} ${item.unit || '—à—Ç'} –≤ ${item.path}\n`;
    });
    return response;
  },

  getInventorySummary: () => {
    const summary = localStorageService.getInventorySummary();
    let response = `üìä **–°–≤–æ–¥–∫–∞ –ø–æ —Å–∫–ª–∞–¥—É:**\n\n`;
    response += `üè¢ –°–∫–ª–∞–¥–æ–≤: ${summary.totalWarehouses}\n`;
    response += `üè† –ö–æ–º–Ω–∞—Ç: ${summary.totalRooms}\n`;
    response += `üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${summary.totalShelves}\n`;
    response += `üìã –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${summary.totalItems}\n\n`;
    
    if (summary.expiringSoon && summary.expiringSoon.length > 0) {
      response += `‚ö†Ô∏è **–ò—Å—Ç–µ–∫–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:**\n`;
      summary.expiringSoon.slice(0, 5).forEach(item => {
        response += `‚Ä¢ ${item.itemName} - ${item.expiryDate} (${item.path})\n`;
      });
    }
    
    return response;
  },

  addToBucket: (itemData: ItemCore) => {
    try {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
      if (itemData.expiryDate) {
        const expiryDate = new Date(itemData.expiryDate);
        if (!isNaN(expiryDate.getTime())) {
          itemData.expiryDate = expiryDate.toISOString().split('T')[0];
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–æ–≤–∞—Ä—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const itemWithId = {
        ...itemData,
        id: itemData.id || uuidv4()
      };
      
      const bucketItem = localStorageService.addItemToBucket(itemWithId as any, '–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SMARTIE');
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let displayDate = '';
      if (itemData.expiryDate) {
        const date = new Date(itemData.expiryDate);
        displayDate = ` —Å–æ —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ ${date.toLocaleDateString('ru-RU')}`;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å –≤–∞–ª—é—Ç–æ–π
      let priceInfo = '';
      if (itemData.price && itemData.currency) {
        priceInfo = ` –ø–æ —Ü–µ–Ω–µ ${itemData.price} ${itemData.currency}`;
      } else if (itemData.price) {
        priceInfo = ` –ø–æ —Ü–µ–Ω–µ ${itemData.price}`;
      }
      
      return `‚úÖ –¢–æ–≤–∞—Ä "${itemData.name}" (${itemData.quantity} ${itemData.unit || '—à—Ç'}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ Bucket${priceInfo}${displayDate}.`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Bucket: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  moveItemFromBucket: (itemName: string, warehouseName: string, roomName: string, containerName: string) => {
    try {
      // –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ bucket
      const bucketItems = localStorageService.getBucketItems();
      console.log('üîç Searching for item:', itemName);
      console.log('üì¶ Available bucket items:', bucketItems.map(i => i.name));
      
      // –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø–æ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
      let item = bucketItems.find(i => i.name.toLowerCase() === itemName.toLowerCase());
      if (!item) {
        item = bucketItems.find(i => i.name.toLowerCase().includes(itemName.toLowerCase()));
      }
      
      console.log('üéØ Found item:', item?.name);
      
      if (!item) {
        return `‚ùå –¢–æ–≤–∞—Ä "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Bucket. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: ${bucketItems.map(i => i.name).join(', ')}`;
      }

      // –ù–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      console.log(`üè¢ Looking for warehouse: "${warehouseName}"`);
      const warehouse = localStorageService.findEntityByNameAndType(warehouseName, 'warehouse');
      if (!warehouse) return `‚ùå –°–∫–ª–∞–¥ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      console.log(`üè† Looking for room: "${roomName}" in warehouse: "${warehouseName}"`);
      const room = localStorageService.findEntityByNameAndType(roomName, 'room', warehouseName);
      if (!room) return `‚ùå –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∫–ª–∞–¥–µ "${warehouseName}".`;
      
      console.log(`üì¶ Looking for container: "${containerName}" in room: "${roomName}"`);
      const container = localStorageService.findEntityByNameAndType(containerName, 'shelf', warehouseName, roomName);
      if (!container) return `‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ "${roomName}".`;

      // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä
      console.log('üîÑ Moving item:', item.name);
      console.log('üìã Item data before move:', item);
      
      const { id, originalPath, destination, isReadyToTransfer, ...itemDataToMove } = item;
      console.log('üìã Cleaned item data:', itemDataToMove);
      
      try {
        localStorageService.addItem(warehouse.id, room.id, container.id, itemDataToMove as ItemCore);
        console.log('‚úÖ Item added to container');
        
        console.log('üÜî Item ID before remove:', item.id);
        if (!item.id) {
          console.error('‚ùå Item ID is undefined!', item);
          return `‚ùå –û—à–∏–±–∫–∞: ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`;
        }
        
        localStorageService.removeBucketItem(item.id);
        console.log('üóëÔ∏è Item removed from bucket');
        
        return `‚úÖ –¢–æ–≤–∞—Ä "${itemName}" –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–∑ Bucket –≤ "${containerName}" (${warehouseName} > ${roomName}).`;
      } catch (addError) {
        console.error('‚ùå Error adding item:', addError);
        return `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${addError instanceof Error ? addError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
      }
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  getBucketItems: () => {
    try {
      const bucketItems = localStorageService.getBucketItems();
      if (bucketItems.length === 0) {
        return `üì≠ Bucket –ø—É—Å—Ç.`;
      }
      
      let response = `üì¶ **–¢–æ–≤–∞—Ä—ã –≤ Bucket:**\n\n`;
      bucketItems.forEach(item => {
        response += `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit || '—à—Ç'}`;
        if (item.expiryDate) response += ` (–¥–æ ${item.expiryDate})`;
        response += `\n`;
      });
      
      return response;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Bucket: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  }
};

const getCurrentContext = (): InventoryContext => {
  const summary = localStorageService.getInventorySummary();
  const warehouses = localStorageService.getWarehouses();
  const bucketItems = localStorageService.getBucketItems();
  
  // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö, –∫–æ–º–Ω–∞—Ç–∞—Ö –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
  let structureInfo = '';
  warehouses.forEach(warehouse => {
    structureInfo += `\nüè¢ –°–∫–ª–∞–¥: ${warehouse.name}`;
    if (warehouse.rooms && warehouse.rooms.length > 0) {
      warehouse.rooms.forEach(room => {
        structureInfo += `\n  üè† –ö–æ–º–Ω–∞—Ç–∞: ${room.name}`;
        if (room.shelves && room.shelves.length > 0) {
          room.shelves.forEach(shelf => {
            structureInfo += `\n    üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${shelf.name}`;
            if (shelf.items && shelf.items.length > 0) {
              structureInfo += ` (${shelf.items.length} —Ç–æ–≤–∞—Ä–æ–≤)`;
            }
          });
        }
      });
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
  let bucketInfo = '';
  if (bucketItems.length > 0) {
    bucketInfo = `\n\nüì¶ **–ö–û–†–ó–ò–ù–ê (BUCKET):**`;
    bucketItems.forEach(item => {
      const priceStr = item.price && item.currency ? ` - ${item.price} ${item.currency}` : '';
      bucketInfo += `\n‚Ä¢ ${item.name} (${item.quantity} ${item.unit || '—à—Ç'})${priceStr}`;
    });
  } else {
    bucketInfo = '\n\nüì≠ –ö–æ—Ä–∑–∏–Ω–∞ (Bucket) –ø—É—Å—Ç–∞';
  }
  
  return {
    currentLocation: "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω",
    totalWarehouses: summary.totalWarehouses,
    totalItems: summary.totalItems,
    recentItems: summary.items.slice(0, 5).map(item => ({
      name: item.itemName,
      location: item.path,
      quantity: item.quantity
    })),
    structureInfo: (structureInfo || '\n(–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤)') + bucketInfo
  };
};

export const sendMessageToSMARTIE = async (
  message: string, 
  chatHistory: ChatMessage[] = []
): Promise<string> => {
  if (!anthropic) {
    throw new Error('Claude API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á.');
  }

  const context = getCurrentContext();
  
  const systemPrompt = `–¢—ã SMARTIE - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.

**–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
- –ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: ${context.currentLocation}
- –°–∫–ª–∞–¥–æ–≤: ${context.totalWarehouses}
- –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${context.totalItems}

**–°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –°–ö–õ–ê–î–û–í:${context.structureInfo}

**–ù–µ–¥–∞–≤–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã:**
${context.recentItems.map(item => `‚Ä¢ ${item.name} (${item.quantity} —à—Ç) - ${item.location}`).join('\n')}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
1. –°–æ–∑–¥–∞—Ç—å —Å–∫–ª–∞–¥: "—Å–æ–∑–¥–∞–π —Å–∫–ª–∞–¥ [–Ω–∞–∑–≤–∞–Ω–∏–µ]"
2. –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: "—Å–æ–∑–¥–∞–π –∫–æ–º–Ω–∞—Ç—É [–Ω–∞–∑–≤–∞–Ω–∏–µ] –≤ —Å–∫–ª–∞–¥–µ [—Å–∫–ª–∞–¥]"
3. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: "—Å–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä [–Ω–∞–∑–≤–∞–Ω–∏–µ] –≤ –∫–æ–º–Ω–∞—Ç–µ [–∫–æ–º–Ω–∞—Ç–∞] —Å–∫–ª–∞–¥–∞ [—Å–∫–ª–∞–¥]"
4. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä: "–¥–æ–±–∞–≤—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [—Ç–æ–≤–∞—Ä] –≤ [–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä]"
5. –î–æ–±–∞–≤–∏—Ç—å –≤ Bucket: "–¥–æ–±–∞–≤—å –≤ bucket [—Ç–æ–≤–∞—Ä]"
6. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–∑ Bucket: "–ø–µ—Ä–µ–º–µ—Å—Ç–∏ [—Ç–æ–≤–∞—Ä] –≤ [–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä]"
7. –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä: "–Ω–∞–π–¥–∏ [—Ç–æ–≤–∞—Ä]" –∏–ª–∏ "–≥–¥–µ [—Ç–æ–≤–∞—Ä]"
8. –ü–æ–∫–∞–∑–∞—Ç—å Bucket: "—á—Ç–æ –≤ bucket" –∏–ª–∏ "–ø–æ–∫–∞–∂–∏ bucket"
9. –°–≤–æ–¥–∫–∞: "–ø–æ–∫–∞–∂–∏ —Å–≤–æ–¥–∫—É" –∏–ª–∏ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

**–ü—Ä–∞–≤–∏–ª–∞:**
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–∏–ª–∏ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
- –ú–û–ñ–ï–®–¨ –í–´–ü–û–õ–ù–Ø–¢–¨ –ù–ï–°–ö–û–õ–¨–ö–û –ö–û–ú–ê–ù–î –ó–ê –†–ê–ó! (–¥–æ 10 –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –¥–æ 100 –≤ PRO)
- –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏—Ö –≤—Å–µ —Å—Ä–∞–∑—É –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
- –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ—è—Å–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–π —É—Ç–æ—á–Ω–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
- –ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è ${new Date().toLocaleDateString('ru-RU')} (${new Date().toISOString().split('T')[0]})
- –ü—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ω–µ–¥–µ–ª—è –æ—Ç —Å–µ–≥–æ–¥–Ω—è") –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
- –ü–û–î–î–ï–†–ñ–ò–í–ê–ô –í–°–ï –í–ê–õ–Æ–¢–´: USD, EUR, UAH, RUB, PLN - —É–∫–∞–∑—ã–≤–∞–π –≤–∞–ª—é—Ç—É —è–≤–Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—ë —É–ø–æ–º—è–Ω—É–ª

**–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è:**
–î–ª—è –û–î–ù–û–ô –∫–æ–º–∞–Ω–¥—ã:
ACTION: [—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è]
PARAMS: {"param1": "value1", "param2": "value2"}
MESSAGE: [—Å–æ–æ–±—â–µ–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é]

–î–ª—è –ù–ï–°–ö–û–õ–¨–ö–ò–• –∫–æ–º–∞–Ω–¥:
MULTI_ACTION_START
ACTION: [—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è1]
PARAMS: {"param1": "value1"}
ACTION: [—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è2]
PARAMS: {"param1": "value1"}
ACTION: [—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è3]
PARAMS: {"param1": "value1"}
MULTI_ACTION_END
MESSAGE: [–æ–±—â–µ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é]

–í–ê–ñ–ù–û:
- JSON –≤ PARAMS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
- –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
- –ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö –∑–∞–ø—è—Ç—ã—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
- createWarehouse: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ"}
- createRoom: {"warehouseName": "—Å–∫–ª–∞–¥", "roomName": "–∫–æ–º–Ω–∞—Ç–∞"}  
- createContainer: {"warehouseName": "—Å–∫–ª–∞–¥", "roomName": "–∫–æ–º–Ω–∞—Ç–∞", "containerName": "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"}
- addItem: {"warehouseName": "—Å–∫–ª–∞–¥", "roomName": "–∫–æ–º–Ω–∞—Ç–∞", "containerName": "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", "name": "—Ç–æ–≤–∞—Ä", "quantity": —á–∏—Å–ª–æ, "unit": "–µ–¥–∏–Ω–∏—Ü–∞", "price": —á–∏—Å–ª–æ, "currency": "USD|EUR|UAH|RUB|PLN", "expiryDate": "YYYY-MM-DD", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "labels": ["—Ç–µ–≥1", "—Ç–µ–≥2"]}
- addToBucket: {"name": "—Ç–æ–≤–∞—Ä", "quantity": —á–∏—Å–ª–æ, "unit": "–µ–¥–∏–Ω–∏—Ü–∞", "price": —á–∏—Å–ª–æ, "currency": "USD|EUR|UAH|RUB|PLN", "expiryDate": "YYYY-MM-DD", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "labels": ["—Ç–µ–≥1", "—Ç–µ–≥2"]}
- moveItemFromBucket: {"itemName": "—Ç–æ–≤–∞—Ä", "warehouseName": "—Å–∫–ª–∞–¥", "roomName": "–∫–æ–º–Ω–∞—Ç–∞", "containerName": "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"}
- getBucketItems: {}
- searchItems: {"itemName": "–Ω–∞–∑–≤–∞–Ω–∏–µ"}
- getInventorySummary: {}`;

  try {
    const messages = [
      ...chatHistory.map(msg => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content
      })),
      {
        role: 'user' as const,
        content: message
      }
    ];

    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 1000,
      system: systemPrompt,
      messages: messages
    });

    const responseText = response.content[0].type === 'text' ? response.content[0].text : '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (responseText.includes('ACTION:') || responseText.includes('MULTI_ACTION_START')) {
      return await executeAction(responseText);
    }
    
    return responseText;
  } catch (error) {
    console.error('Claude API Error:', error);
    if (error instanceof Error) {
      return `‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`;
    }
    return '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ SMARTIE.';
  }
};

const executeAction = async (responseText: string): Promise<string> => {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
    console.log('üêõ SMARTIE Response:', responseText);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º—É–ª—å—Ç–∏–∫–æ–º–∞–Ω–¥—ã
    const isMultiAction = responseText.includes('MULTI_ACTION_START');
    
    if (isMultiAction) {
      console.log('üîÑ Processing multiple actions');
      return await executeMultipleActions(responseText);
    } else {
      console.log('‚û°Ô∏è Processing single action');
      return await executeSingleAction(responseText);
    }
    
  } catch (error) {
    console.error('Action execution error:', error);
    return `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
  }
};

const executeSingleAction = async (responseText: string): Promise<string> => {
  const actionMatch = responseText.match(/ACTION:\s*(\w+)/);
  const paramsMatch = responseText.match(/PARAMS:\s*({.*?})/s);
  const messageMatch = responseText.match(/MESSAGE:\s*(.*?)(?=ACTION:|PARAMS:|$)/s);
  
  if (!actionMatch) return responseText;
  
  const actionType = actionMatch[1];
  const params = parseParams(paramsMatch?.[1] || '{}');
  const userMessage = messageMatch ? messageMatch[1].trim() : '';
  
  const result = await executeCommand(actionType, params);
  return userMessage ? `${userMessage}\n\n${result}` : result;
};

const executeMultipleActions = async (responseText: string): Promise<string> => {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª–æ–∫ –º–µ–∂–¥—É MULTI_ACTION_START –∏ MULTI_ACTION_END
  const multiActionMatch = responseText.match(/MULTI_ACTION_START(.*?)MULTI_ACTION_END/s);
  const messageMatch = responseText.match(/MESSAGE:\s*(.*?)$/s);
  
  console.log('üîç Multi-action match:', multiActionMatch);
  
  if (!multiActionMatch) return responseText;
  
  const actionsBlock = multiActionMatch[1];
  const userMessage = messageMatch ? messageMatch[1].trim() : '';
  
  console.log('üìù Actions block:', actionsBlock);
  console.log('üí¨ User message:', userMessage);
  
  // –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Å–µ ACTION/PARAMS –ø–∞—Ä—ã - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–≥–µ–∫—Å
  const actionMatches = actionsBlock.match(/ACTION:\s*(\w+)\s*\nPARAMS:\s*(\{[\s\S]*?\})(?=\s*ACTION:|\s*$)/g);
  
  console.log('üéØ Found action matches:', actionMatches);
  
  if (!actionMatches) return responseText;
  
  let results: string[] = [];
  let commandCount = 0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∫–æ–º–∞–Ω–¥
  const maxCommands = getMaxCommandsForUser(); // 10 –¥–ª—è FREE, 100 –¥–ª—è PRO
  
  for (const actionMatch of actionMatches) {
    if (commandCount >= maxCommands) {
      results.push(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥ (${maxCommands} –∑–∞ —Ä–∞–∑). –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã.`);
      break;
    }
    
    const actionTypeMatch = actionMatch.match(/ACTION:\s*(\w+)/);
    const paramsTextMatch = actionMatch.match(/PARAMS:\s*(\{[\s\S]*?\})/);
    
    console.log('üîß Processing action:', actionTypeMatch?.[1]);
    console.log('üìä Params:', paramsTextMatch?.[1]);
    
    if (actionTypeMatch) {
      const actionType = actionTypeMatch[1];
      const params = parseParams(paramsTextMatch?.[1] || '{}');
      
      const result = await executeCommand(actionType, params);
      results.push(result);
      commandCount++;
    }
  }
  
  const allResults = results.join('\n');
  return userMessage ? `${userMessage}\n\n${allResults}` : allResults;
};

const parseParams = (jsonString: string): any => {
  try {
    // –û—á–∏—Å—Ç–∏–º JSON –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    let cleanJson = jsonString.trim();
    // –£–¥–∞–ª–∏–º trailing –∑–∞–ø—è—Ç—ã–µ
    cleanJson = cleanJson.replace(/,(\s*[}\]])/g, '$1');
    return JSON.parse(cleanJson);
  } catch (parseError) {
    console.error('JSON parse error:', parseError, 'Raw JSON:', jsonString);
    return {};
  }
};

const executeCommand = async (actionType: string, params: any): Promise<string> => {
  switch (actionType) {
    case 'createWarehouse':
      return availableActions.createWarehouse(params.name || '');
    case 'createRoom':
      return availableActions.createRoom(params.warehouseName || '', params.roomName || '');
    case 'createContainer':
      return availableActions.createContainer(params.warehouseName || '', params.roomName || '', params.containerName || '');
    case 'addItem':
      const itemData: ItemCore = {
        name: params.name || 'Unnamed Item',
        quantity: params.quantity || 1,
        unit: params.unit || 'pcs',
        priority: params.priority || 'Normal',
        category: params.category,
        price: params.price,
        currency: params.currency,
        expiryDate: params.expiryDate,
        description: params.description,
        labels: params.labels
      };
      return availableActions.addItem(params.warehouseName || '', params.roomName || '', params.containerName || '', itemData);
    case 'searchItems':
      return availableActions.searchItems(params.itemName || '');
    case 'addToBucket':
      const bucketItemData: ItemCore = {
        name: params.name || 'Unnamed Item',
        quantity: params.quantity || 1,
        unit: params.unit || 'pcs',
        priority: params.priority || 'Normal',
        category: params.category,
        price: params.price,
        currency: params.currency,
        expiryDate: params.expiryDate,
        description: params.description,
        labels: params.labels
      };
      return availableActions.addToBucket(bucketItemData);
    case 'moveItemFromBucket':
      return availableActions.moveItemFromBucket(params.itemName || '', params.warehouseName || '', params.roomName || '', params.containerName || '');
    case 'getBucketItems':
      return availableActions.getBucketItems();
    case 'getInventorySummary':
      return availableActions.getInventorySummary();
    default:
      return `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${actionType}`;
  }
};

const getMaxCommandsForUser = (): number => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const licenseStatus = JSON.parse(localStorage.getItem('inventory-licenses') || '[]');
    const hasProLicense = licenseStatus.some((license: any) => 
      license.isActive && license.type !== 'FREE'
    );
    return hasProLicense ? 100 : 10;
  } catch (error) {
    return 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é FREE –≤–µ—Ä—Å–∏—è
  }
};

export const isClaudeInitialized = (): boolean => {
  return anthropic !== null;
};