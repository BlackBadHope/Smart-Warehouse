import Anthropic from '@anthropic-ai/sdk';
import * as localStorageService from './localStorageService';
import { ItemCore } from '../types';

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á –≤ UI
let anthropic: Anthropic | null = null;

export const initializeClaudeAPI = (apiKey: string) => {
  anthropic = new Anthropic({
    apiKey: apiKey,
    dangerouslyAllowBrowser: true // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
  });
};

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
}

interface InventoryContext {
  currentLocation: string;
  totalWarehouses: number;
  totalItems: number;
  recentItems: Array<{name: string, location: string, quantity: number}>;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ SMARTIE
const availableActions = {
  createWarehouse: (name: string) => {
    const warehouse = localStorageService.addWarehouse(name);
    return `‚úÖ –°–∫–ª–∞–¥ "${name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.`;
  },

  createRoom: (warehouseName: string, roomName: string) => {
    try {
      const warehouse = localStorageService.findEntityByNameAndType(warehouseName, 'warehouse');
      if (!warehouse) return `‚ùå –°–∫–ª–∞–¥ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const room = localStorageService.addRoom(warehouse.id, roomName);
      return `‚úÖ –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∫–ª–∞–¥–µ "${warehouseName}".`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  createContainer: (warehouseName: string, roomName: string, containerName: string) => {
    try {
      const warehouse = localStorageService.findEntityByNameAndType(warehouseName, 'warehouse');
      if (!warehouse) return `‚ùå –°–∫–ª–∞–¥ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const room = localStorageService.findEntityByNameAndType(roomName, 'room', warehouseName);
      if (!room) return `‚ùå –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∫–ª–∞–¥–µ "${warehouseName}".`;
      
      const container = localStorageService.addShelf(warehouse.id, room.id, containerName);
      return `‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerName}" —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ "${roomName}" —Å–∫–ª–∞–¥–∞ "${warehouseName}".`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  addItem: (warehouseName: string, roomName: string, containerName: string, itemData: ItemCore) => {
    try {
      const warehouse = localStorageService.findEntityByNameAndType(warehouseName, 'warehouse');
      if (!warehouse) return `‚ùå –°–∫–ª–∞–¥ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const room = localStorageService.findEntityByNameAndType(roomName, 'room', warehouseName);
      if (!room) return `‚ùå –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
      
      const container = localStorageService.findEntityByNameAndType(containerName, 'shelf', warehouseName, roomName);
      if (!container) return `‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const item = localStorageService.addItem(warehouse.id, room.id, container.id, itemData);
      return `‚úÖ –¢–æ–≤–∞—Ä "${itemData.name}" (${itemData.quantity} ${itemData.unit || '—à—Ç'}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ "${containerName}".`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  searchItems: (itemName: string) => {
    const results = localStorageService.findItemsByName(itemName);
    if (results.length === 0) {
      return `‚ùå –¢–æ–≤–∞—Ä "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
    }
    
    let response = `üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ "${itemName}": ${results.length}\n\n`;
    results.forEach(item => {
      response += `üì¶ ${item.quantity} ${item.unit || '—à—Ç'} –≤ ${item.path}\n`;
    });
    return response;
  },

  getInventorySummary: () => {
    const summary = localStorageService.getInventorySummary();
    let response = `üìä **–°–≤–æ–¥–∫–∞ –ø–æ —Å–∫–ª–∞–¥—É:**\n\n`;
    response += `üè¢ –°–∫–ª–∞–¥–æ–≤: ${summary.totalWarehouses}\n`;
    response += `üè† –ö–æ–º–Ω–∞—Ç: ${summary.totalRooms}\n`;
    response += `üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${summary.totalShelves}\n`;
    response += `üìã –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${summary.totalItems}\n\n`;
    
    if (summary.expiringSoon && summary.expiringSoon.length > 0) {
      response += `‚ö†Ô∏è **–ò—Å—Ç–µ–∫–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:**\n`;
      summary.expiringSoon.slice(0, 5).forEach(item => {
        response += `‚Ä¢ ${item.itemName} - ${item.expiryDate} (${item.path})\n`;
      });
    }
    
    return response;
  },

  addToBucket: (itemData: ItemCore) => {
    try {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
      if (itemData.expiryDate) {
        const expiryDate = new Date(itemData.expiryDate);
        if (!isNaN(expiryDate.getTime())) {
          itemData.expiryDate = expiryDate.toISOString().split('T')[0];
        }
      }
      
      const bucketItem = localStorageService.addItemToBucket(itemData as any, '–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SMARTIE');
      return `‚úÖ –¢–æ–≤–∞—Ä "${itemData.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ Bucket (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∑–æ–Ω—É).`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Bucket: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  moveItemFromBucket: (itemName: string, warehouseName: string, roomName: string, containerName: string) => {
    try {
      // –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ bucket
      const bucketItems = localStorageService.getBucketItems();
      const item = bucketItems.find(i => i.name.toLowerCase().includes(itemName.toLowerCase()));
      
      if (!item) {
        return `‚ùå –¢–æ–≤–∞—Ä "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Bucket.`;
      }

      // –ù–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const warehouse = localStorageService.findEntityByNameAndType(warehouseName, 'warehouse');
      if (!warehouse) return `‚ùå –°–∫–ª–∞–¥ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
      
      const room = localStorageService.findEntityByNameAndType(roomName, 'room', warehouseName);
      if (!room) return `‚ùå –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
      
      const container = localStorageService.findEntityByNameAndType(containerName, 'shelf', warehouseName, roomName);
      if (!container) return `‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;

      // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä
      const { id, originalPath, destination, isReadyToTransfer, ...itemDataToMove } = item;
      localStorageService.addItem(warehouse.id, room.id, container.id, itemDataToMove as ItemCore);
      localStorageService.removeBucketItem(item.id);
      
      return `‚úÖ –¢–æ–≤–∞—Ä "${itemName}" –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–∑ Bucket –≤ "${containerName}" (${warehouseName} > ${roomName}).`;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  },

  getBucketItems: () => {
    try {
      const bucketItems = localStorageService.getBucketItems();
      if (bucketItems.length === 0) {
        return `üì≠ Bucket –ø—É—Å—Ç.`;
      }
      
      let response = `üì¶ **–¢–æ–≤–∞—Ä—ã –≤ Bucket:**\n\n`;
      bucketItems.forEach(item => {
        response += `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit || '—à—Ç'}`;
        if (item.expiryDate) response += ` (–¥–æ ${item.expiryDate})`;
        response += `\n`;
      });
      
      return response;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Bucket: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  }
};

const getCurrentContext = (): InventoryContext => {
  const summary = localStorageService.getInventorySummary();
  return {
    currentLocation: "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω",
    totalWarehouses: summary.totalWarehouses,
    totalItems: summary.totalItems,
    recentItems: summary.items.slice(0, 5).map(item => ({
      name: item.itemName,
      location: item.path,
      quantity: item.quantity
    }))
  };
};

export const sendMessageToSMARTIE = async (
  message: string, 
  chatHistory: ChatMessage[] = []
): Promise<string> => {
  if (!anthropic) {
    throw new Error('Claude API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á.');
  }

  const context = getCurrentContext();
  
  const systemPrompt = `–¢—ã SMARTIE - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.

**–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
- –ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: ${context.currentLocation}
- –°–∫–ª–∞–¥–æ–≤: ${context.totalWarehouses}
- –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${context.totalItems}

**–ù–µ–¥–∞–≤–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã:**
${context.recentItems.map(item => `‚Ä¢ ${item.name} (${item.quantity} —à—Ç) - ${item.location}`).join('\n')}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
1. –°–æ–∑–¥–∞—Ç—å —Å–∫–ª–∞–¥: "—Å–æ–∑–¥–∞–π —Å–∫–ª–∞–¥ [–Ω–∞–∑–≤–∞–Ω–∏–µ]"
2. –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: "—Å–æ–∑–¥–∞–π –∫–æ–º–Ω–∞—Ç—É [–Ω–∞–∑–≤–∞–Ω–∏–µ] –≤ —Å–∫–ª–∞–¥–µ [—Å–∫–ª–∞–¥]"
3. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: "—Å–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä [–Ω–∞–∑–≤–∞–Ω–∏–µ] –≤ –∫–æ–º–Ω–∞—Ç–µ [–∫–æ–º–Ω–∞—Ç–∞] —Å–∫–ª–∞–¥–∞ [—Å–∫–ª–∞–¥]"
4. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä: "–¥–æ–±–∞–≤—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [—Ç–æ–≤–∞—Ä] –≤ [–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä]"
5. –î–æ–±–∞–≤–∏—Ç—å –≤ Bucket: "–¥–æ–±–∞–≤—å –≤ bucket [—Ç–æ–≤–∞—Ä]"
6. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–∑ Bucket: "–ø–µ—Ä–µ–º–µ—Å—Ç–∏ [—Ç–æ–≤–∞—Ä] –≤ [–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä]"
7. –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä: "–Ω–∞–π–¥–∏ [—Ç–æ–≤–∞—Ä]" –∏–ª–∏ "–≥–¥–µ [—Ç–æ–≤–∞—Ä]"
8. –ü–æ–∫–∞–∑–∞—Ç—å Bucket: "—á—Ç–æ –≤ bucket" –∏–ª–∏ "–ø–æ–∫–∞–∂–∏ bucket"
9. –°–≤–æ–¥–∫–∞: "–ø–æ–∫–∞–∂–∏ —Å–≤–æ–¥–∫—É" –∏–ª–∏ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

**–ü—Ä–∞–≤–∏–ª–∞:**
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
- –í–´–ü–û–õ–ù–Ø–ô –¢–û–õ–¨–ö–û –û–î–ù–£ –ö–û–ú–ê–ù–î–£ –ó–ê –†–ê–ó!
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–π - –≤—ã–ø–æ–ª–Ω–∏ –ø–µ—Ä–≤–æ–µ, –∑–∞—Ç–µ–º —Å–ø—Ä–æ—Å–∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
- –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ—è—Å–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–π —É—Ç–æ—á–Ω–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
- –ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

**–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:**
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
ACTION: [—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è]
PARAMS: {"param1": "value1", "param2": "value2"}
MESSAGE: [—Å–æ–æ–±—â–µ–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é]

–í–ê–ñ–ù–û:
- JSON –≤ PARAMS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
- –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
- –ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö –∑–∞–ø—è—Ç—ã—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
- createWarehouse: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ"}
- createRoom: {"warehouseName": "—Å–∫–ª–∞–¥", "roomName": "–∫–æ–º–Ω–∞—Ç–∞"}  
- createContainer: {"warehouseName": "—Å–∫–ª–∞–¥", "roomName": "–∫–æ–º–Ω–∞—Ç–∞", "containerName": "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"}
- addItem: {"warehouseName": "—Å–∫–ª–∞–¥", "roomName": "–∫–æ–º–Ω–∞—Ç–∞", "containerName": "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", "name": "—Ç–æ–≤–∞—Ä", "quantity": —á–∏—Å–ª–æ, "unit": "–µ–¥–∏–Ω–∏—Ü–∞", "price": —á–∏—Å–ª–æ, "expiryDate": "YYYY-MM-DD", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "labels": ["—Ç–µ–≥1", "—Ç–µ–≥2"]}
- addToBucket: {"name": "—Ç–æ–≤–∞—Ä", "quantity": —á–∏—Å–ª–æ, "unit": "–µ–¥–∏–Ω–∏—Ü–∞", "price": —á–∏—Å–ª–æ, "expiryDate": "YYYY-MM-DD", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "labels": ["—Ç–µ–≥1", "—Ç–µ–≥2"]}
- moveItemFromBucket: {"itemName": "—Ç–æ–≤–∞—Ä", "warehouseName": "—Å–∫–ª–∞–¥", "roomName": "–∫–æ–º–Ω–∞—Ç–∞", "containerName": "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"}
- getBucketItems: {}
- searchItems: {"itemName": "–Ω–∞–∑–≤–∞–Ω–∏–µ"}
- getInventorySummary: {}`;

  try {
    const messages = [
      ...chatHistory.map(msg => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content
      })),
      {
        role: 'user' as const,
        content: message
      }
    ];

    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 1000,
      system: systemPrompt,
      messages: messages
    });

    const responseText = response.content[0].type === 'text' ? response.content[0].text : '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (responseText.includes('ACTION:')) {
      return await executeAction(responseText);
    }
    
    return responseText;
  } catch (error) {
    console.error('Claude API Error:', error);
    if (error instanceof Error) {
      return `‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`;
    }
    return '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ SMARTIE.';
  }
};

const executeAction = async (responseText: string): Promise<string> => {
  try {
    const actionMatch = responseText.match(/ACTION:\s*(\w+)/);
    const paramsMatch = responseText.match(/PARAMS:\s*({.*?})/s);
    const messageMatch = responseText.match(/MESSAGE:\s*(.*?)(?=ACTION:|PARAMS:|$)/s);
    
    if (!actionMatch) return responseText;
    
    const actionType = actionMatch[1];
    let params = {};
    
    if (paramsMatch) {
      try {
        // –û—á–∏—Å—Ç–∏–º JSON –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        let jsonString = paramsMatch[1].trim();
        // –£–¥–∞–ª–∏–º trailing –∑–∞–ø—è—Ç—ã–µ
        jsonString = jsonString.replace(/,(\s*[}\]])/g, '$1');
        params = JSON.parse(jsonString);
      } catch (parseError) {
        console.error('JSON parse error:', parseError, 'Raw JSON:', paramsMatch[1]);
        return `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã. JSON: ${paramsMatch[1]}`;
      }
    }
    
    const userMessage = messageMatch ? messageMatch[1].trim() : '';
    
    let result = '';
    
    switch (actionType) {
      case 'createWarehouse':
        result = availableActions.createWarehouse(params.name || '');
        break;
      case 'createRoom':
        result = availableActions.createRoom(params.warehouseName || '', params.roomName || '');
        break;
      case 'createContainer':
        result = availableActions.createContainer(params.warehouseName || '', params.roomName || '', params.containerName || '');
        break;
      case 'addItem':
        const itemData: ItemCore = {
          name: params.name || 'Unnamed Item',
          quantity: params.quantity || 1,
          unit: params.unit || 'pcs',
          priority: params.priority || 'Normal',
          category: params.category,
          price: params.price,
          expiryDate: params.expiryDate,
          description: params.description,
          labels: params.labels
        };
        result = availableActions.addItem(params.warehouseName || '', params.roomName || '', params.containerName || '', itemData);
        break;
      case 'searchItems':
        result = availableActions.searchItems(params.itemName || '');
        break;
      case 'addToBucket':
        const bucketItemData: ItemCore = {
          name: params.name || 'Unnamed Item',
          quantity: params.quantity || 1,
          unit: params.unit || 'pcs',
          priority: params.priority || 'Normal',
          category: params.category,
          price: params.price,
          expiryDate: params.expiryDate,
          description: params.description,
          labels: params.labels
        };
        result = availableActions.addToBucket(bucketItemData);
        break;
      case 'moveItemFromBucket':
        result = availableActions.moveItemFromBucket(params.itemName || '', params.warehouseName || '', params.roomName || '', params.containerName || '');
        break;
      case 'getBucketItems':
        result = availableActions.getBucketItems();
        break;
      case 'getInventorySummary':
        result = availableActions.getInventorySummary();
        break;
      default:
        result = userMessage || responseText;
    }
    
    return userMessage ? `${userMessage}\n\n${result}` : result;
    
  } catch (error) {
    console.error('Action execution error:', error);
    return `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
  }
};

export const isClaudeInitialized = (): boolean => {
  return anthropic !== null;
};