interface LocaleConfig {
  code: string;
  name: string;
  currencies: string[];
  excludedCurrencies?: string[];
  dateFormat: string;
  numberFormat: string;
  flag: string;
}

interface Translations {
  [key: string]: {
    [locale: string]: string;
  };
}

class LocalizationService {
  private currentLocale: string;
  private locales: LocaleConfig[] = [
    {
      code: 'uk',
      name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
      currencies: ['USD', 'EUR', 'UAH'],
      excludedCurrencies: ['RUB'], // –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É–±–ª–∏ –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã
      dateFormat: 'DD.MM.YYYY',
      numberFormat: 'uk-UA',
      flag: 'üá∫üá¶'
    },
    {
      code: 'ru',
      name: '–†—É—Å—Å–∫–∏–π',
      currencies: ['RUB', 'USD', 'EUR'],
      dateFormat: 'DD.MM.YYYY',
      numberFormat: 'ru-RU',
      flag: 'üá∑üá∫'
    },
    {
      code: 'en',
      name: 'English',
      currencies: ['USD', 'EUR', 'GBP'],
      dateFormat: 'MM/DD/YYYY',
      numberFormat: 'en-US',
      flag: 'üá∫üá∏'
    },
    {
      code: 'de',
      name: 'Deutsch',
      currencies: ['EUR', 'USD'],
      dateFormat: 'DD.MM.YYYY',
      numberFormat: 'de-DE',
      flag: 'üá©üá™'
    },
    {
      code: 'pl',
      name: 'Polski',
      currencies: ['PLN', 'EUR', 'USD'],
      dateFormat: 'DD.MM.YYYY',
      numberFormat: 'pl-PL',
      flag: 'üáµüá±'
    }
  ];

  private translations: Translations = {
    // Navigation
    'nav.warehouses': {
      'uk': '–°–ö–õ–ê–î–ò',
      'ru': '–°–ö–õ–ê–î–´', 
      'en': 'WAREHOUSES',
      'de': 'LAGER',
      'pl': 'MAGAZYNY'
    },
    'nav.rooms': {
      'uk': '–ö–Ü–ú–ù–ê–¢–ò',
      'ru': '–ö–û–ú–ù–ê–¢–´',
      'en': 'ROOMS', 
      'de': 'R√ÑUME',
      'pl': 'POKOJE'
    },
    'nav.containers': {
      'uk': '–ö–û–ù–¢–ï–ô–ù–ï–†–ò',
      'ru': '–ö–û–ù–¢–ï–ô–ù–ï–†–´',
      'en': 'CONTAINERS',
      'de': 'BEH√ÑLTER', 
      'pl': 'KONTENERY'
    },
    'nav.items': {
      'uk': '–¢–û–í–ê–†–ò',
      'ru': '–¢–û–í–ê–†–´',
      'en': 'ITEMS',
      'de': 'ARTIKEL',
      'pl': 'PRZEDMIOTY'
    },
    'nav.bucket': {
      'uk': '–ö–û–®–ò–ö',
      'ru': '–ö–û–†–ó–ò–ù–ê',
      'en': 'BUCKET',
      'de': 'KORB',
      'pl': 'KOSZYK'
    },

    // Actions
    'action.add': {
      'uk': '–î–æ–¥–∞—Ç–∏',
      'ru': '–î–æ–±–∞–≤–∏—Ç—å',
      'en': 'Add',
      'de': 'Hinzuf√ºgen',
      'pl': 'Dodaj'
    },
    'action.edit': {
      'uk': '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏',
      'ru': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
      'en': 'Edit',
      'de': 'Bearbeiten',
      'pl': 'Edytuj'
    },
    'action.delete': {
      'uk': '–í–∏–¥–∞–ª–∏—Ç–∏',
      'ru': '–£–¥–∞–ª–∏—Ç—å',
      'en': 'Delete',
      'de': 'L√∂schen',
      'pl': 'Usu≈Ñ'
    },
    'action.save': {
      'uk': '–ó–±–µ—Ä–µ–≥—Ç–∏',
      'ru': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
      'en': 'Save',
      'de': 'Speichern',
      'pl': 'Zapisz'
    },
    'action.cancel': {
      'uk': '–°–∫–∞—Å—É–≤–∞—Ç–∏',
      'ru': '–û—Ç–º–µ–Ω–∞',
      'en': 'Cancel',
      'de': 'Abbrechen',
      'pl': 'Anuluj'
    },

    // Licenses
    'license.free': {
      'uk': '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è',
      'ru': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è',
      'en': 'Free Version',
      'de': 'Kostenlose Version',
      'pl': 'Darmowa wersja'
    },
    'license.pro': {
      'uk': 'Pro –≤–µ—Ä—Å—ñ—è',
      'ru': 'Pro –≤–µ—Ä—Å–∏—è',
      'en': 'Pro Version',
      'de': 'Pro Version',
      'pl': 'Wersja Pro'
    },
    'license.upgrade': {
      'uk': '–û–Ω–æ–≤–∏—Ç–∏ –¥–æ Pro',
      'ru': '–û–±–Ω–æ–≤–∏—Ç—å –¥–æ Pro',
      'en': 'Upgrade to Pro',
      'de': 'Auf Pro upgraden',
      'pl': 'Uaktualnij do Pro'
    },

    // Payment
    'payment.price': {
      'uk': '–¶—ñ–Ω–∞',
      'ru': '–¶–µ–Ω–∞',
      'en': 'Price',
      'de': 'Preis',
      'pl': 'Cena'
    },
    'payment.buy': {
      'uk': '–ö—É–ø–∏—Ç–∏',
      'ru': '–ö—É–ø–∏—Ç—å',
      'en': 'Buy',
      'de': 'Kaufen',
      'pl': 'Kup'
    },
    'payment.processing': {
      'uk': '–û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É...',
      'ru': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...',
      'en': 'Processing payment...',
      'de': 'Zahlung wird verarbeitet...',
      'pl': 'Przetwarzanie p≈Çatno≈õci...'
    },

    // Units
    'unit.pcs': {
      'uk': '—à—Ç',
      'ru': '—à—Ç',
      'en': 'pcs',
      'de': 'Stk',
      'pl': 'szt'
    },
    'unit.kg': {
      'uk': '–∫–≥',
      'ru': '–∫–≥',
      'en': 'kg',
      'de': 'kg',
      'pl': 'kg'
    },
    'unit.l': {
      'uk': '–ª',
      'ru': '–ª',
      'en': 'l',
      'de': 'l',
      'pl': 'l'
    },

    // Messages
    'msg.success': {
      'uk': '–£—Å–ø—ñ—à–Ω–æ!',
      'ru': '–£—Å–ø–µ—à–Ω–æ!',
      'en': 'Success!',
      'de': 'Erfolgreich!',
      'pl': 'Sukces!'
    },
    'msg.error': {
      'uk': '–ü–æ–º–∏–ª–∫–∞',
      'ru': '–û—à–∏–±–∫–∞',
      'en': 'Error',
      'de': 'Fehler',
      'pl': 'B≈ÇƒÖd'
    },

    // War-related messages for Ukraine
    'msg.no_rub_ua': {
      'uk': 'üá∫üá¶ –†—É–±–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω –≤—ñ–π–Ω–∏ –∑ —Ä–æ—Å—ñ—î—é',
      'ru': '–†—É–±–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ',
      'en': 'RUB currency not available in this region',
      'de': 'RUB W√§hrung in dieser Region nicht verf√ºgbar',
      'pl': 'RUB waluta niedostƒôpna w tym regionie'
    },

    // User
    'user.name': {
      'uk': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      'ru': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      'en': 'User',
      'de': 'Benutzer',
      'pl': 'U≈ºytkownik'
    },

    // UI Text
    'ui.select_warehouse': {
      'uk': '–í–∏–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥',
      'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥',
      'en': 'Select a Warehouse',
      'de': 'Lager ausw√§hlen',
      'pl': 'Wybierz magazyn'
    },
    'ui.select_room': {
      'uk': '–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–º–Ω–∞—Ç—É',
      'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É',
      'en': 'Select Room',
      'de': 'Raum ausw√§hlen',
      'pl': 'Wybierz pok√≥j'
    },
    'ui.select_container': {
      'uk': '–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä',
      'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä',
      'en': 'Select Container',
      'de': 'Beh√§lter ausw√§hlen',
      'pl': 'Wybierz kontener'
    },
    'ui.staging_area': {
      'uk': '–û–±–ª–∞—Å—Ç—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏',
      'ru': '–û–±–ª–∞—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
      'en': 'Staging Area',
      'de': 'Bereitstellungsbereich',
      'pl': 'Obszar przygotowania'
    },

    // P2P Network & QR Connections
    'p2p.title': {
      'uk': 'QR P2P –ó\'—î–¥–Ω–∞–Ω–Ω—è',
      'ru': 'QR P2P –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
      'en': 'QR P2P Connection',
      'de': 'QR P2P Verbindung',
      'pl': 'Po≈ÇƒÖczenie QR P2P'
    },
    'p2p.create_qr': {
      'uk': '–°—Ç–≤–æ—Ä–∏—Ç–∏ QR',
      'ru': '–°–æ–∑–¥–∞—Ç—å QR',
      'en': 'Create QR',
      'de': 'QR erstellen',
      'pl': 'Utw√≥rz QR'
    },
    'p2p.connect': {
      'uk': '–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è',
      'ru': '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
      'en': 'Connect',
      'de': 'Verbinden',
      'pl': 'Po≈ÇƒÖcz'
    },
    'p2p.copy_data': {
      'uk': '–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ',
      'ru': '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
      'en': 'Copy Data',
      'de': 'Daten kopieren',
      'pl': 'Kopiuj dane'
    },
    'p2p.connect_device': {
      'uk': '–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π',
      'ru': '–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
      'en': 'Connect Device',
      'de': 'Ger√§t verbinden',
      'pl': 'Pod≈ÇƒÖcz urzƒÖdzenie'
    },
    'p2p.connection_desc': {
      'uk': '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —á–µ—Ä–µ–∑ QR –∫–æ–¥–∏',
      'ru': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ QR –∫–æ–¥—ã',
      'en': 'Connect devices via QR codes',
      'de': 'Ger√§te √ºber QR-Codes verbinden',
      'pl': '≈ÅƒÖczenie urzƒÖdze≈Ñ przez kody QR'
    },
    'p2p.paste_prompt': {
      'uk': '–í—Å—Ç–∞–≤—Ç–µ —Å—é–¥–∏ JSON –¥–∞–Ω—ñ –∑ QR –∫–æ–¥—É...',
      'ru': '–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ QR –∫–æ–¥–∞...',
      'en': 'Paste JSON data from QR code here...',
      'de': 'JSON-Daten vom QR-Code hier einf√ºgen...',
      'pl': 'Wklej tutaj dane JSON z kodu QR...'
    },
    'p2p.creating': {
      'uk': '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è...',
      'ru': '–°–æ–∑–¥–∞–Ω–∏–µ...',
      'en': 'Creating...',
      'de': 'Erstellen...',
      'pl': 'Tworzenie...'
    },
    'p2p.connecting': {
      'uk': 'üîÑ –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è...',
      'ru': 'üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...',
      'en': 'üîÑ Connecting...',
      'de': 'üîÑ Verbinden...',
      'pl': 'üîÑ ≈ÅƒÖczenie...'
    },
    'p2p.copied': {
      'uk': '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!',
      'ru': '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!',
      'en': 'Copied!',
      'de': 'Kopiert!',
      'pl': 'Skopiowane!'
    }
  };

  constructor() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å –ø–æ –±—Ä–∞—É–∑–µ—Ä—É –∏–ª–∏ IP
    this.currentLocale = this.detectLocale();
    this.saveLocalePreference();
  }

  private detectLocale(): string {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª—å
    const saved = localStorage.getItem('app-locale');
    if (saved && this.locales.find(l => l.code === saved)) {
      return saved;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –±—Ä–∞—É–∑–µ—Ä—É
    const browserLang = navigator.language.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (browserLang.startsWith('uk')) return 'uk';
    if (browserLang.startsWith('ru')) return 'ru';
    if (browserLang.startsWith('de')) return 'de';
    if (browserLang.startsWith('pl')) return 'pl';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ IP/—á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    if (timezone.includes('Kiev') || timezone.includes('Europe/Kiev')) return 'uk';
    if (timezone.includes('Moscow') || timezone.includes('Europe/Moscow')) return 'ru';
    if (timezone.includes('Berlin') || timezone.includes('Europe/Berlin')) return 'de';
    if (timezone.includes('Warsaw') || timezone.includes('Europe/Warsaw')) return 'pl';

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    return 'en';
  }

  private saveLocalePreference(): void {
    localStorage.setItem('app-locale', this.currentLocale);
  }

  // Public API
  getCurrentLocale(): string {
    return this.currentLocale;
  }

  setLocale(localeCode: string): boolean {
    if (this.locales.find(l => l.code === localeCode)) {
      this.currentLocale = localeCode;
      this.saveLocalePreference();
      return true;
    }
    return false;
  }

  getAvailableLocales(): LocaleConfig[] {
    return [...this.locales];
  }

  translate(key: string, params?: Record<string, string>): string {
    const translation = this.translations[key]?.[this.currentLocale] 
                       || this.translations[key]?.['en'] 
                       || key;

    if (params) {
      return Object.entries(params).reduce(
        (str, [param, value]) => str.replace(`{{${param}}}`, value),
        translation
      );
    }

    return translation;
  }

  // Shorthand
  t = this.translate.bind(this);

  getAvailableCurrencies(): string[] {
    const locale = this.locales.find(l => l.code === this.currentLocale);
    if (!locale) return ['USD', 'EUR'];

    let currencies = [...locale.currencies];
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –≤–∞–ª—é—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞–ª–∏
    if (locale.excludedCurrencies) {
      currencies = currencies.filter(c => !locale.excludedCurrencies!.includes(c));
    }

    return currencies;
  }

  formatPrice(amount: number, currency: string): string {
    const locale = this.locales.find(l => l.code === this.currentLocale);
    const numberFormat = locale?.numberFormat || 'en-US';

    try {
      return new Intl.NumberFormat(numberFormat, {
        style: 'currency',
        currency: currency
      }).format(amount);
    } catch (error) {
      return `${amount} ${currency}`;
    }
  }

  formatDate(date: Date | string): string {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    const locale = this.locales.find(l => l.code === this.currentLocale);
    const numberFormat = locale?.numberFormat || 'en-US';

    try {
      return dateObj.toLocaleDateString(numberFormat);
    } catch (error) {
      return dateObj.toLocaleDateString();
    }
  }

  getCurrentLocaleConfig(): LocaleConfig | undefined {
    return this.locales.find(l => l.code === this.currentLocale);
  }

  isRussianCurrencyBlocked(): boolean {
    const locale = this.getCurrentLocaleConfig();
    return locale?.excludedCurrencies?.includes('RUB') || false;
  }

  getBlockedCurrencyMessage(): string {
    if (this.currentLocale === 'uk' && this.isRussianCurrencyBlocked()) {
      return this.translate('msg.no_rub_ua');
    }
    return '';
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  getUserCountry(): string {
    switch (this.currentLocale) {
      case 'uk': return 'UA';
      case 'ru': return 'RU';
      case 'de': return 'DE';
      case 'pl': return 'PL';
      default: return 'US';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è UI
  getCurrentFlag(): string {
    const locale = this.getCurrentLocaleConfig();
    return locale?.flag || 'üåç';
  }
}

// Singleton instance
export const localizationService = new LocalizationService();
export default localizationService;