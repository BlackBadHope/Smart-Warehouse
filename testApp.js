// Simple browser automation test for Inventory OS
import puppeteer from 'puppeteer';

async function testApp() {
  console.log('üöÄ Starting Inventory OS Browser Test...');
  
  const browser = await puppeteer.launch({ 
    headless: false, // –ø–æ–∫–∞–∑–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä
    defaultViewport: { width: 1280, height: 720 }
  });
  
  const page = await browser.newPage();
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    console.log('üì± Loading app...');
    await page.goto('http://localhost:5173', { waitUntil: 'networkidle0' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = await page.$eval('h1', el => el.textContent);
    console.log(`‚úÖ App title: ${title}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    const warehousesHeader = await page.$('h2:has-text("WAREHOUSES")') || await page.$eval('h2', el => el.textContent?.includes('WAREHOUSES') ? el : null).catch(() => null);
    const roomsHeader = await page.$('h2:has-text("ROOMS")') || await page.$eval('h2', el => el.textContent?.includes('ROOMS') ? el : null).catch(() => null);
    const containersHeader = await page.$('h2:has-text("CONTAINERS")') || await page.$eval('h2', el => el.textContent?.includes('CONTAINERS') ? el : null).catch(() => null);
    
    console.log(`‚úÖ Warehouses panel: ${warehousesHeader ? 'Present' : 'Missing'}`);
    console.log(`‚úÖ Rooms panel: ${roomsHeader ? 'Present' : 'Missing'}`);  
    console.log(`‚úÖ Containers panel: ${containersHeader ? 'Present' : 'Missing'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–≥ —Å design mode
    const bodyClasses = await page.evaluate(() => document.body.className);
    console.log(`üé® Body classes: ${bodyClasses}`);
    
    if (bodyClasses.includes('designer-mode')) {
      console.log('‚ùå BUG FOUND: Designer mode is enabled by default!');
    } else {
      console.log('‚úÖ Designer mode is correctly disabled');
    }
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ - –∏—â–µ–º –∫–Ω–æ–ø–∫—É Plus
    console.log('üèóÔ∏è Testing warehouse creation...');
    const createWarehouseBtn = await page.$('button svg[data-testid="plus"], button:has([data-lucide="plus"])').catch(() => null);
    if (createWarehouseBtn) {
      await createWarehouseBtn.click();
      console.log('‚úÖ Warehouse creation button clicked');
    } else {
      console.log('‚ö†Ô∏è Warehouse creation button not found');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    console.log('üîç Checking for modals...');
    await page.waitForTimeout(1000);
    
    const modal = await page.$('div[class*="modal"], div[class*="fixed inset-0"]');
    if (modal) {
      console.log('‚úÖ Modal appeared');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
      const closeBtn = await page.$('button:has-text("Cancel"), button:has-text("√ó")');
      if (closeBtn) {
        await closeBtn.click();
        console.log('‚úÖ Modal closed');
      }
    }
    
    // –¢–µ—Å—Ç SMARTIE –∫–Ω–æ–ø–∫–∏
    console.log('üß† Testing SMARTIE button...');
    const smartieBtn = await page.$('button[title*="SMARTIE"], button[title*="AI"]');
    if (smartieBtn) {
      console.log('‚úÖ SMARTIE button found');
    } else {
      console.log('‚ùå SMARTIE button not found');
    }
    
    // –¢–µ—Å—Ç self-test –∫–Ω–æ–ø–∫–∏
    console.log('üß™ Testing Self-Test button...');
    const selfTestBtn = await page.$('button[title*="Self-Test"]');
    if (selfTestBtn) {
      console.log('‚úÖ Self-Test button found');
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ self-test
      await selfTestBtn.click();
      await page.waitForTimeout(2000);
      
      const testModal = await page.$('text="Self-Test Suite"');
      if (testModal) {
        console.log('‚úÖ Self-Test modal opened');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º
        const closeTestBtn = await page.$('button:has-text("√ó")');
        if (closeTestBtn) {
          await closeTestBtn.click();
        }
      }
    } else {
      console.log('‚ùå Self-Test button not found');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    const errors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        errors.push(msg.text());
      }
    });
    
    await page.waitForTimeout(2000);
    
    if (errors.length > 0) {
      console.log('‚ùå Console errors found:');
      errors.forEach(error => console.log(`   ${error}`));
    } else {
      console.log('‚úÖ No console errors');
    }
    
    console.log('üéâ Browser test completed!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await browser.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testApp().catch(console.error);